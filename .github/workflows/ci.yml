name: CI Pipeline with GHCR

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  GHCR_REGISTRY: ghcr.io

jobs:
  # Job 1: Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run frontend tests
        run: npm test -- --coverage --watchAll=false --ci
        working-directory: ./frontend
        env:
          CI: true

      - name: Check frontend vulnerabilities
        run: npm audit --audit-level=critical
        working-directory: ./frontend

  # Job 2: Build and Push to GHCR
  build-and-push:
    name: Build & Push Docker Images to GHCR
    runs-on: ubuntu-latest
    needs: [frontend-test]
    outputs:
      frontend-image: ${{ steps.image-names.outputs.frontend-image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Define image names (force lowercase)
        id: image-names
        run: |
          USERNAME=$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')
          FRONTEND_IMAGE="ghcr.io/$USERNAME/weather-frontend:latest"
          echo "FRONTEND_IMAGE=$FRONTEND_IMAGE" >> $GITHUB_ENV
          echo "frontend-image=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT

      - name: Build frontend image
        run: |
          docker build \
            --build-arg REACT_APP_WEATHER_API_KEY=${{ secrets.REACT_APP_WEATHER_API_KEY }} \
            -f ./frontend/Dockerfile \
            -t $FRONTEND_IMAGE ./frontend
          docker tag $FRONTEND_IMAGE ghcr.io/${{ github.actor }}/weather-frontend:${{ github.sha }}

      - name: Push frontend image
        run: |
          docker push $FRONTEND_IMAGE
          docker push ghcr.io/${{ github.actor }}/weather-frontend:${{ github.sha }}

  # Job 3: Image Vulnerability Scan
  scan-images:
    name: Scan Docker Images with Trivy
    runs-on: ubuntu-latest
    needs: [build-and-push]

    steps:
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.frontend-image }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
